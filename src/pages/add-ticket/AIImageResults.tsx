import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  Image,
  ActivityIndicator,
  Dimensions,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { imageGenerationService, ImageGenerationRequest } from '../../services/api';
import {
  Colors,
  Typography,
  Spacing,
  BorderRadius,
  Shadows,
} from '../../styles/designSystem';

interface AIImageResultsProps {
  navigation: any;
  route?: {
    params?: {
      ticketData?: any;
      reviewData?: {
        rating: number;
        reviewText: string;
      };
      images?: string[];
      settings?: {
        backgroundColor: string;
        includeText: boolean;
        imageStyle: string;
        aspectRatio: string;
      };
    };
  };
}

const { width } = Dimensions.get('window');
const cardWidth = width - 48;
const cardHeight = (cardWidth * 5) / 4;

const AIImageResults: React.FC<AIImageResultsProps> = ({ navigation, route }) => {
  const [isGenerating, setIsGenerating] = useState(true);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [generationHistory, setGenerationHistory] = useState<string[]>([]);

  const ticketData = route?.params?.ticketData;
  const reviewData = route?.params?.reviewData;
  const existingImages = route?.params?.images || [];
  const settings = route?.params?.settings;

  useEffect(() => {
    handleGenerateAIImage();
  }, []);

  const handleGenerateAIImage = async () => {
    setIsGenerating(true);

    try {
      // Ìã∞Ïºì Îç∞Ïù¥ÌÑ∞ÏôÄ ÌõÑÍ∏∞ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
      if (!ticketData?.title || !reviewData?.reviewText) {
        Alert.alert('Ïò§Î•ò', 'Ìã∞Ïºì Ï†ïÎ≥¥ÎÇò ÌõÑÍ∏∞ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
        setIsGenerating(false);
        return;
      }

      // Î∞±ÏóîÎìú API ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
      // ÌîÑÎ°†Ìä∏ÏóîÎìú Ïû•Î•¥Î•º Î∞±ÏóîÎìúÍ∞Ä Ïù¥Ìï¥Ìï† Ïàò ÏûàÎäî ÌòïÌÉúÎ°ú Îß§Ìïë
      const mapGenreForBackend = (frontendGenre: string): string => {
        if (frontendGenre?.includes('ÎÆ§ÏßÄÏª¨') || frontendGenre?.includes('Ïó∞Í∑π')) {
          return 'ÎÆ§ÏßÄÏª¨'; // Ïó∞Í∑π/ÎÆ§ÏßÄÏª¨ ‚Üí ÎÆ§ÏßÄÏª¨Î°ú Îß§Ìïë
        }
        if (frontendGenre?.includes('Î∞¥Îìú')) {
          return 'Î∞¥Îìú';
        }
        return 'ÎÆ§ÏßÄÏª¨'; // Í∏∞Î≥∏Í∞í
      };

      const requestData: ImageGenerationRequest = {
        title: ticketData.title,
        review: reviewData.reviewText,
        genre: mapGenreForBackend(ticketData.genre || ''), // Îß§Ìïë Ìï®Ïàò Ï†ÅÏö©
        location: ticketData.place || '', // Í≥µÏó∞ Ïû•ÏÜå
        date: ticketData.performedAt || '', // Í≥µÏó∞ ÎÇ†Ïßú
        cast: [], // Ï∂úÏó∞ÏßÑ (ÌòÑÏû¨Îäî Îπà Î∞∞Ïó¥)
      };

      console.log('üîç Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', requestData);

      // Î∞±ÏóîÎìú API Ìò∏Ï∂ú
      const result = await imageGenerationService.generateImage(requestData);

      if (result.success && result.data) {
        console.log('‚úÖ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏÑ±Í≥µ:', result.data);
        
        // ÏÉùÏÑ±Îêú Ïù¥ÎØ∏ÏßÄ URL ÏÑ§Ï†ï
        setGeneratedImage(result.data.imageUrl);
        setGenerationHistory(prev => [result.data.imageUrl, ...prev]);

        Alert.alert('ÏÑ±Í≥µ', 'AI Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
      } else {
        console.error('‚ùå Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®:', result.error);
        Alert.alert('Ïò§Î•ò', result.error?.message || 'AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('‚ùå Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë ÏòàÏô∏ Î∞úÏÉù:', error);
      Alert.alert('Ïò§Î•ò', 'AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSelectImage = () => {
    if (generatedImage) {
      navigation.navigate('TicketComplete', {
        ticketData,
        reviewData,
        images: [generatedImage],
      });
    }
  };

  const handleRegenerateImage = () => {
    setGeneratedImage(null);
    handleGenerateAIImage();
  };

  // ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± (Î∞±ÏóîÎìú Ïó∞Í≤∞ Ïã§Ìå® Ïãú ÎåÄÏ≤¥)
  const handleGenerateTestImage = async () => {
    setIsGenerating(true);

    try {
      const requestData: ImageGenerationRequest = {
        title: ticketData?.title || 'Í≥µÏó∞',
        review: reviewData?.reviewText || '',
        genre: ticketData?.genre,
        location: ticketData?.location,
        date: ticketData?.date,
        cast: ticketData?.cast,
      };

      console.log('üß™ ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏöîÏ≤≠:', requestData);

      const response = await imageGenerationService.generateTestImage(requestData);

      if (response.success && response.data) {
        const { imageUrl } = response.data;
        setGeneratedImage(imageUrl);
        setGenerationHistory((prev) => [imageUrl, ...prev]);
        Alert.alert('ÌÖåÏä§Ìä∏ Î™®Îìú', 'ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
      } else {
        throw new Error(response.error?.message || 'ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®');
      }
    } catch (error) {
      console.error('‚ùå ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®:', error);
      Alert.alert('Ïò§Î•ò', 'ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±ÎèÑ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSelectFromHistory = (imageUrl: string) => {
    setGeneratedImage(imageUrl);
  };

  const handleGoBack = () => {
    navigation.goBack();
  };

  return (
    <SafeAreaView style={styles.container} edges={['left', 'right']}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={handleGoBack}>
          <Text style={styles.backButtonText}>‚Üê</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±</Text>
      </View>

      {isGenerating ? (
        <View style={styles.loadingFullScreen}>
          <ActivityIndicator size="large" color="#b11515" />
          <Text style={styles.generatingTitle}>AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë...</Text>
        </View>
      ) : (
        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {generatedImage && (
            <View style={styles.generatedImageContainer}>
              <Image
                source={{ uri: generatedImage }}
                style={styles.generatedImage}
                resizeMode="cover"
              />
              <View style={styles.actionButtonsContainer}>
                <TouchableOpacity
                  style={styles.regenerateButton}
                  onPress={handleRegenerateImage}
                >
                  <Text style={styles.regenerateButtonText}>Îã§Ïãú ÏÉùÏÑ±ÌïòÍ∏∞</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.selectButton}
                  onPress={handleSelectImage}
                >
                  <Text style={styles.selectButtonText}>Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉùÌïòÍ∏∞</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}

          {generationHistory.length > 1 && (
            <View style={styles.sectionContainer}>
              <Text style={styles.sectionTitle}>ÏÉùÏÑ± ÌûàÏä§ÌÜ†Î¶¨</Text>
              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                style={styles.historyContainer}
              >
                {generationHistory.slice(1).map((imageUrl, index) => (
                  <TouchableOpacity
                    key={index}
                    style={styles.historyImageWrapper}
                    onPress={() => handleSelectFromHistory(imageUrl)}
                  >
                    <Image
                      source={{ uri: imageUrl }}
                      style={[
                        styles.historyImage,
                        generatedImage === imageUrl &&
                          styles.selectedHistoryImage,
                      ]}
                      resizeMode="cover"
                    />
                    {generatedImage === imageUrl && (
                      <View style={styles.selectedOverlay}>
                        <Text style={styles.selectedText}>‚úì</Text>
                      </View>
                    )}
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
          )}
        </ScrollView>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#F8F9FA' },

  // Ìó§Îçî
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: Spacing.lg,
    backgroundColor: Colors.systemBackground,
    ...Shadows.small,
    zIndex: 1,
  },

  backButton: {
    width: 40,
    height: 40,
    borderRadius: BorderRadius.round,
    backgroundColor: Colors.secondarySystemBackground,
    justifyContent: 'center',
    alignItems: 'center',
    ...Shadows.small,
    zIndex: 2,
  },

  backButtonText: {
    ...Typography.title3,
    color: Colors.label,
    fontWeight: 'bold',
  },

  headerTitle: {
    ...Typography.headline,
    color: Colors.label,
    position: 'absolute',
    left: 0,
    right: 0,
    textAlign: 'center',
  },

  // Î≥∏Î¨∏
  content: { flex: 1 },

  loadingFullScreen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    //height: Dimensions.get('window').height,
  },

  generatingTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2C3E50',
    marginTop: 8,
  },

  generatedImageContainer: {
    marginHorizontal: 20,
    marginTop: 20,
    padding: 20,
    borderRadius: 12,
    alignItems: 'center',
  },

  generatedImage: {
    width: cardWidth,
    height: cardHeight,
    borderRadius: 12,
    marginBottom: 20,
  },

  // Î≤ÑÌäº Îëê Í∞ú
  actionButtonsContainer: {
    flexDirection: 'row',
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 8,
    gap: 12,
  },

  regenerateButton: {
    width: (cardWidth - 12) / 2,
    backgroundColor: '#f2f2f2',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
  },

  regenerateButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#000',
  },

  selectButton: {
    width: (cardWidth - 12) / 2,
    backgroundColor: '#b11515',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
  },

  selectButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },

  // ÏÉùÏÑ± ÌûàÏä§ÌÜ†Î¶¨
  sectionContainer: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 20,
    marginTop: 20,
    marginBottom: 20,
    padding: 20,
    borderRadius: 12,
  },

  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2C3E50',
    marginBottom: 12,
  },

  historyContainer: { marginTop: 12 },

  historyImageWrapper: { position: 'relative', marginRight: 12 },

  historyImage: {
    width: 80,
    height: 100,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: 'transparent',
  },

  selectedHistoryImage: { borderColor: '#b11515' },

  selectedOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },

  selectedText: {
    fontSize: 24,
    color: '#b11515',
    fontWeight: 'bold',
  },
});

export default AIImageResults;
